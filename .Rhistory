unlink("intro-Bayes_cache", recursive = TRUE)
10^8
10^8 / 20000
10^4 / 20000
10^5 / 20000
10^4 / 20000
10^4.5 / 20000
10^4.1 / 20000
10^4.2 / 20000
10^4.3 / 20000
10^4.4 / 20000
10^4.35 / 20000
10^4.31 / 20000
10^4.301 / 20000
20^4 / 20000
20^2 / 20000
20^3 / 20000
20^4 / 20000
unlink("intro-Bayes_cache", recursive = TRUE)
# prepare data to fit in Stan
data_stan <- list(
N = nrow(d),
wage = scale(d$wage),
wspeed = scale(d$wspeed)
)
d <- read.table ("./data/wagespeed.csv", header=T, sep=",")
hablar::set_wd_to_script_path()
rm(list=ls())
d <- read.table ("./data/wagespeed.csv", header=T, sep=",")
# Create the scatter plot
plot(d$wage, d$wspeed,
xlab = "Hourly wage (NY=100)",
ylab = "Mean walking speed (m/min)",
pch = 19,       # solid circle points
col = "blue",   # blue color for the points
cex.lab = 1.2,  # size of axis labels
cex.main = 1.3, # size of plot title
cex=1.3,
xlim=c(10, 130), ylim=c(60,100))
# Add city labels, tilt only specified cities
tilt_cities <- c("MexicoCity", "Bucharest") # "Frankfurt",
for(i in 1:nrow(d)) {
if( d$city[i] %in% tilt_cities) {
text(d$wage[i], d$wspeed[i], labels = d$city[i], pos = 4, cex = 0.7, offset = 0.5, srt = 30)
} else if(d$city[i]=="Frankfurt" | d$city[i]=="Frankfurt") {
text(d$wage[i], d$wspeed[i], labels = d$city[i], pos = 4, cex = 0.7, offset = 0.5, srt = -45)
}else {
text(d$wage[i], d$wspeed[i], labels = d$city[i], pos = 4, cex = 0.7, offset = 0.5, srt = 0)
}
}
data_stan <- list(
N = nrow(d),
wage = scale(d$wage),
wspeed = scale(d$wspeed)
)
summary(lm(wspeed ~ I(wage-mean(wage)), d))
summary(lm(I(scale(wspeed)) ~ I(scale(wage)), d))
library(rstan)
options(mc.cores = parallel::detectCores()) # indicate stan to use multiple cores if available
wspeed_fit <- stan(file = "wspeed_model.stan", data = data_stan, iter = 2000, chains = 4)
str(data_stan)
?scale
standardize
standardize <- function(x){
Z <- (x - mean(x)) / sd(x)
return(Z)
}
# prepare data to fit in Stan
data_stan <- list(
N = nrow(d),
wage = standardize(d$wage),
wspeed = standardize(d$wspeed)
)
wspeed_fit <- stan(file = "wspeed_model.stan", data = data_stan, iter = 2000, chains = 4)
saveRDS(wspeed_fit, "wspeed_fit.RDS")
print(wspeed_fit)
Z
unlink("intro-Bayes-slides/intro-Bayes_cache", recursive = TRUE)
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
fig.width=9, fig.height=3.5, fig.retina=3,
out.width = "100%",
cache = FALSE,
echo = TRUE,
message = FALSE,
warning = FALSE,
hiline = TRUE
)
# slides & formatting
options(htmltools.dir.version = FALSE)
options(crayon.enabled = TRUE)
xaringanExtra::use_xaringan_extra(c("tile_view", "animate_css", "tachyons"))
library(xaringanthemer)
style_duo_accent(
#primary_color = "#1381B0",
primary_color = "#3e2f5b",
secondary_color = "#FF961C",
inverse_header_color = "#FFFFFF",
colors = c(purple = "#3e2f5b",
red = "#f34213",
blue = " #0000FF",
orange = "#ff8811")
)
# https://pkg.garrickadenbuie.com/xaringanthemer/articles/themes.html
# style_mono_dark(base_color = "#cbf7ed")
# style_solarized_light(colors = c(
#   red = "#f34213",
#   purple = "#3e2f5b",
#   orange = "#ff8811",
#   green = "#136f63",
#   white = "#FFFFFF",
#   blue = " #0000FF"
# ))
library(tidyverse)
library(kableExtra)
nice_theme <- theme_xaringan()+theme(text=element_text(size=9),panel.border=element_blank(),strip.text=element_text(size=rel(0.8)),axis.text=element_text(size=8),panel.grid.minor=element_blank(),axis.line=element_line(size=.4), axis.title=element_text(size=11), legend.title=element_text(size=11))
theme_set(nice_theme)
background_plot <- nice_theme$plot.background$colour
knitr::opts_knit$set(global.par = TRUE) # fix par for multiple plots
par(bg = background_plot)
# other
library(lme4)
set.seed(8)
N <- 10
x <- seq(5,50,length.out=N)+rnorm(N,mean=0,sd=0.1)
y <- 12 + 0.5 * x + rnorm(N, mean=0, sd=6)
d <- data.frame(x,y)
rm(x)
rm(y)
pl_r <- c(-4,53)
m0 <- lm(y~x,d)
beta <- coef(m0)
par(mfrow=c(1,2))
# helpers
draw_squared_error <- function(x,y,beta,col_rect =rgb(1,0,0,0.4)){
pred_y <- beta[1] + beta[2]*x
if(pred_y<=y){
xleft <- x - abs(pred_y-y)
ybottom <- pred_y
xright <- x
ytop <- y
}else{
xleft <- x
ybottom <- y
xright <- x + abs(pred_y-y)
ytop <- pred_y
}
rect(xleft, ybottom, xright, ytop, density = NA,col = col_rect, border = F)
}
plot(d$x,d$y,pch=19,cex=2,col=rgb(0,0,0,0.7),xlab="x (predictor variable)",ylab="y (dependent variable)",xlim=c(pl_r[1],pl_r[2]),ylim=c(pl_r[1],pl_r[2]))
abline(m0,lwd=2)
for(i in 1:nrow(d)){
draw_squared_error(d$x[i],d$y[i],beta)
}
arrows(d$x,beta[1]+beta[2]*d$x,d$x,d$y,col=rgb(1,0,0,0.9),lwd=2,length=0.1)
text(39, -3, bquote(hat(y) ~ "=" ~ beta[0] ~ "+" ~ beta[1] ~ x))
set.seed(8)
N <- 10
x <- seq(5,50,length.out=N)+rnorm(N,mean=0,sd=0.1)
y <- 12 + 0.5 * x + rnorm(N, mean=0, sd=6)
d <- data.frame(x,y)
rm(x)
rm(y)
m0 <- lm(y~x,d)
beta <- coef(m0)
par(mfrow=c(1,2))
# helpers
draw_squared_error <- function(x,y,beta,col_rect =rgb(1,0,0,0.4)){
pred_y <- beta[1] + beta[2]*x
if(pred_y<=y){
xleft <- x - abs(pred_y-y)
ybottom <- pred_y
xright <- x
ytop <- y
}else{
xleft <- x
ybottom <- y
xright <- x + abs(pred_y-y)
ytop <- pred_y
}
rect(xleft, ybottom, xright, ytop, density = NA,col = col_rect, border = F)
}
plot(d$x,d$y,pch=19,cex=2,col=rgb(0,0,0,0.7),xlab="x (predictor variable)",ylab="y (dependent variable)",xlim=c(pl_r[1],pl_r[2]),ylim=c(pl_r[1],pl_r[2]))
abline(m0,lwd=2)
for(i in 1:nrow(d)){
draw_squared_error(d$x[i],d$y[i],beta)
}
arrows(d$x,beta[1]+beta[2]*d$x,d$x,d$y,col=rgb(1,0,0,0.9),lwd=2,length=0.1)
text(39, -3, bquote(hat(y) ~ "=" ~ beta[0] ~ "+" ~ beta[1] ~ x))
###
plot_vertical_gaussian <- function(x,y,y_span,sigma,x_factor=5,...){
N <- 100
y_coord <- seq(y-y_span,y+y_span,length.out=N)
x_coord <- x - x_factor*dnorm(y_coord-y, mean=0,sd=sigma)
lines(c(x_coord[1],x_coord[length(x_coord)]),c(y_coord[1],y_coord[length(y_coord)]),lwd=1,lty=2)
arrows(x - x_factor*dnorm(0, mean=0,sd=sigma),y,x,y,length=0.11,...)
lines(x_coord,y_coord,...)
}
sd_residuals <- sqrt(sum(m0$residuals^2)/(nrow(d)-2))
plot(d$x,d$y,pch=19,cex=2,col=rgb(0,0,0,0.3),xlab="x (predictor variable)",ylab="y (dependent variable)",xlim=c(pl_r[1],pl_r[2]),ylim=c(pl_r[1],pl_r[2]))
abline(m0,lwd=2)
#arrows(d$x,beta[1]+beta[2]*d$x,d$x,d$y,col=rgb(1,0,0,0.9),lwd=2,length=0.1)
text(39, -3, bquote(hat(y) ~ "=" ~ beta[0] ~ "+" ~ beta[1] ~ x))
for(i in seq(8,43,length.out=4)){
plot_vertical_gaussian(i,beta[1]+beta[2]*i,y_span=18,sigma=sd_residuals,x_factor=100,col="red",lwd=2)
}
par(mfrow=c(1,1))
with(sleepstudy[sleepstudy$Subject=="308",],
plot( Days,Reaction,pch=19,main="308",xlim=c(-1,11),ylim=c(200,500))
)
x <- sleepstudy$Days[sleepstudy$Subject=="308"]
y <- sleepstudy$Reaction[sleepstudy$Subject=="308"]
loglik <- function(par){
# parameter vector = [intercept, slope, log(SD)]
pred <- par[1] + par[2]*x
return(sum(dnorm(y, mean = pred, sd = exp(par[3]), log = TRUE)))  #<<
}
par(mfrow=c(1,3))
curve(dnorm(x, mean=250, sd=180),from=0, to=1000, xlab="Intercept",ylab="prior density", col="blue")
curve(dnorm(x, mean=20, sd=20),from=-50, to=50, xlab="Slope",ylab="prior density", col="blue")
x_pSD <- seq(-1,6, length.out = 500)
y_pSD <- dnorm(x_pSD , mean=4,sd=1)
plot(exp(x_pSD),y_pSD, type="l", xlab=expression(sigma[epsilon]),ylab="prior density", col="blue")
par(mfrow=c(1,3))
curve(dnorm(x, mean=250, sd=180),from=0, to=1000, xlab="Intercept",ylab="prior density", col="blue")
curve(dnorm(x, mean=20, sd=20),from=-50, to=50, xlab="Slope",ylab="prior density", col="blue")
x_pSD <- seq(-1,6, length.out = 500)
y_pSD <- dnorm(x_pSD , mean=4,sd=1)
plot(x_pSD,y_pSD, type="l", xlab=expression(paste("log ",sigma[epsilon])),ylab="prior density", col="red")
logprior <- function(par){
intercept_prior <- dnorm(par[1], mean=250, sd=180, log=TRUE)
slope_prior <- dnorm(par[2], mean=20, sd=20, log=TRUE)
sd_prior <- dnorm(par[3],mean=4, sd=1, log=TRUE)
return(intercept_prior+slope_prior+sd_prior) #<<
}
logposterior <- function(par){
return (loglik(par) + logprior(par))
}
# initial parameters
startvalue <- c(250, 20, 5) #  [intercept, slope, log(SD)]
# proposal density
proposalfunction <- function(par){
return(rnorm(3, mean = par, sd= c(15,5,0.2))) #<<
}
run_metropolis_MCMC <- function(startvalue, iterations){
# set up an empty array to store smapled values
chain <- array(dim = c(iterations+1,3))
# put starting values at top of arrays
chain[1,] <- startvalue
for (i in 1:iterations){
# draw a random proposal
proposal <- proposalfunction(chain[i,])
# ratio of posterior density between new and old values
a <- exp(logposterior(proposal) - logposterior(chain[i,]))
# sample random number & accept/reject the parameter values
if (runif(1) < a){
chain[i+1,] <- proposal
}else{
chain[i+1,] <- chain[i,]
}
}
return(chain)
}
load("chain_ex.RData")
head(chain)
#set.seed(3)
#chain <- run_metropolis_MCMC(startvalue, 20000)
# #save(chain, file="chain_ex.RData")
# load("chain_ex.RData")
burnIn <- 5000
acceptance <- 1-mean(duplicated(chain[-(1:burnIn),]))
LSfit <- lm(y~x)
interceptLS <- coef(LSfit)[1]
slopeLS <- coef(LSfit)[2]
sigmaLS <- summary(LSfit)$sigma
par(mfrow = c(2,3))
hist(chain[-(1:burnIn),1],main="Intercept",border="white",col="dark grey", breaks=20)
abline(v = interceptLS, col="red",lwd=2)
hist(chain[-(1:burnIn),2],main="Slope",border="white",col="dark grey", breaks=20)
abline(v = slopeLS , col="red",lwd=2)
hist(exp(chain[-(1:burnIn),3]),main=expression(sigma[epsilon]),border="white",col="dark grey", breaks=20)
abline(v = sigmaLS, col="red" ,lwd=2)
plot(chain[-(1:burnIn),1], type = "l", main = "Chain values")
abline(h = interceptLS, col="red",lwd=2)
plot(chain[-(1:burnIn),2], type = "l" , main = "Chain values")
abline(h = slopeLS, col="red",lwd=2)
plot(exp(chain[-(1:burnIn),3]), type = "l" , main = "Chain values")
abline(h = sigmaLS, col="red",lwd=2)
# remove initial 'burn in' samples
burnIn <- 5000
slope_samples <- chain[-(1:burnIn),2]
# mean of posterior distribution
mean(slope_samples)
# 95% Bayesian credible interval
alpha <- 0.05
round(c(quantile(slope_samples, probs = alpha/2),
quantile(slope_samples, probs = 1-alpha/2)),
digits=2)
d <- read.table ("../data/wagespeed.csv",
header=T,
sep=",")
head(d)
par(mfrow=c(1,1))
plot(d$wage, d$wspeed,
xlab = "Hourly wage (NY=100)",
ylab = "Mean walking speed (m/min)",
pch = 19,       # solid circle points
col = "blue",   # blue color for the points
cex.lab = 1.2,  # size of axis labels
cex.main = 1.3, # size of plot title
cex=1.3,
xlim=c(10, 130), ylim=c(60,100))
# Add city labels, tilt only specified cities
tilt_cities <- c("MexicoCity", "Bucharest","London") # "Frankfurt",
for(i in 1:nrow(d)) {
if( d$city[i] %in% tilt_cities) {
text(d$wage[i], d$wspeed[i], labels = d$city[i], pos = 4, cex = 0.7, offset = 0.5, srt = 30)
} else if(d$city[i]=="Frankfurt" | d$city[i]=="Stockholm" | d$city[i]=="Prague") {
text(d$wage[i], d$wspeed[i], labels = d$city[i], pos = 4, cex = 0.7, offset = 0.5, srt = -45)
}else {
text(d$wage[i], d$wspeed[i], labels = d$city[i], pos = 4, cex = 0.7, offset = 0.5, srt = 0)
}
}
# function to standardize variables
standardize <- function(x){
Z <- (x - mean(x)) / sd(x)
return(Z)
}
# prepare data to fit in Stan
data_stan <- list(
N = nrow(d),
wage = standardize(d$wage),
wspeed = standardize(d$wspeed)
)
#
str(data_stan)
